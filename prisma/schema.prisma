// learn more about this file in the prisma docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    teamId        String?
    team          Team?        @relation(fields: [teamId], references: [id])
    role          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    issues        Issue[]
    dailyScrums   DailyScrum[]
    issueComments IssueComment[]

    @@index([teamId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Team {
    id          String       @id @default(cuid())
    name        String
    projectName String
    users       User[]
    issues      Issue[]
    sprints     Sprint[]
    dailyScrums  DailyScrum[]
    statuses      Status[]

}

model Issue {
    id       String  @id @default(cuid())
    status   String?
    backlog  String
    summary  String
    teamId   String
    sprintId String?
    estimate String?
    type     String?
    tag      String?
    userId   String?
    description     String?
    dateCompleted DateTime?
    user User?   @relation(fields: [userId], references: [id])
    team     Team    @relation(fields: [teamId], references: [id])
    sprint   Sprint? @relation(fields: [sprintId], references: [id])
    issueComments      IssueComment[]
    
    @@index([teamId])
    @@index([userId])
    @@index([sprintId])
}

model Sprint {
    id        String   @id @default(cuid())
    name      String
    startDate DateTime
    endDate   DateTime
    issues    Issue[]
    teamId    String
    team      Team     @relation(fields: [teamId], references: [id])

    @@index([teamId])
}

model Status {
    id    String @id @default(cuid())
    value String
    title String
    teamId    String
    team      Team     @relation(fields: [teamId], references: [id])

    @@index([teamId])
}

model DailyScrum {
    id         String   @id @default(cuid())
    yesterday  String
    today      String
    blockers   String
    datePosted DateTime
    userId     String
    teamId     String
    user       User     @relation(fields: [userId], references: [id])
    team       Team     @relation(fields: [teamId], references: [id])

    @@index([teamId])
    @@index([userId])

}

model IssueComment {
    id              String @id @default(cuid())
    userId          String
    dateCreated     DateTime
    content         String
    issueId         String
    user            User     @relation(fields: [userId], references: [id])
    issue           Issue    @relation(fields: [issueId], references: [id])

    @@index([userId])
    @@index([issueId])
}